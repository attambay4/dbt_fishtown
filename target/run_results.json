{"results": [{"node": {"raw_sql": "{{\r\n    config(\r\n        materialized = 'table',\r\n        dist = 'type_id',\r\n        sort = 'created_at'\r\n    )\r\n}}\r\n\r\nwith source as (\r\n\r\n    select * from `fa--interview-task.interview.devices`\r\n),\r\n\r\n--changing float data format for dates to date data format\r\nmodified as (\r\n    \r\n    select \r\n        type,\r\n        device,   \r\n        date_add(DATE '1900-01-01', INTERVAL cast(created_at as INT64)-2 DAY) as created_at,\r\n        date_add(DATE '1900-01-01', INTERVAL cast(updated_at as INT64)-2 DAY) as updated_at,\r\n        type_id\r\n    from source\r\n)\r\n\r\nselect * from modified", "compiled": true, "database": "fishtown-interview-292223", "schema": "dbt_atambay", "fqn": ["jaffle_shop", "staging", "devices"], "unique_id": "model.jaffle_shop.devices", "package_name": "jaffle_shop", "root_path": "C:\\fishtown_interview\\dbt_fishtown", "path": "staging\\devices.sql", "original_file_path": "models\\staging\\devices.sql", "name": "devices", "resource_type": "model", "alias": "devices", "checksum": {"name": "sha256", "checksum": "8fef39cd85891fa18b69fa5bc58bda48a862a4932eca128dff9ea5f026b75dfc"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "dist": "type_id", "sort": "created_at"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\run\\jaffle_shop\\models\\staging\\devices.sql", "deferred": false, "compiled_sql": "\n\nwith source as (\n\n    select * from `fa--interview-task.interview.devices`\n),\n\n--changing float data format for dates to date data format\nmodified as (\n    \n    select \n        type,\n        device,   \n        date_add(DATE '1900-01-01', INTERVAL cast(created_at as INT64)-2 DAY) as created_at,\n        date_add(DATE '1900-01-01', INTERVAL cast(updated_at as INT64)-2 DAY) as updated_at,\n        type_id\n    from source\n)\n\nselect * from modified", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith source as (\n\n    select * from `fa--interview-task.interview.devices`\n),\n\n--changing float data format for dates to date data format\nmodified as (\n    \n    select \n        type,\n        device,   \n        date_add(DATE '1900-01-01', INTERVAL cast(created_at as INT64)-2 DAY) as created_at,\n        date_add(DATE '1900-01-01', INTERVAL cast(updated_at as INT64)-2 DAY) as updated_at,\n        type_id\n    from source\n)\n\nselect * from modified"}, "error": null, "status": "CREATE TABLE (4.5k rows, 159.7 KB processed)", "execution_time": 3.3332104682922363, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-15T14:44:36.546230Z", "completed_at": "2020-10-15T14:44:36.578243Z"}, {"name": "execute", "started_at": "2020-10-15T14:44:36.579156Z", "completed_at": "2020-10-15T14:44:39.878437Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\r\n    config(\r\n        materialized = 'table',\r\n        dist = 'user_id',\r\n        sort = 'created_at'\r\n    )\r\n}}\r\n\r\nwith source as (\r\n\r\n    select * from `fa--interview-task.interview.orders`\r\n),\r\n\r\n--determinining categories for different order statuses\r\nxf as (\r\n    \r\n    select \r\n        *,\r\n        case\r\n            when status IN ('paid', 'completed', 'shipped') THEN 'completed' \r\n            else status \r\n        end as order_status_category\r\n    from source\r\n)\r\n\r\nselect * from xf", "compiled": true, "database": "fishtown-interview-292223", "schema": "dbt_atambay", "fqn": ["jaffle_shop", "staging", "orders"], "unique_id": "model.jaffle_shop.orders", "package_name": "jaffle_shop", "root_path": "C:\\fishtown_interview\\dbt_fishtown", "path": "staging\\orders.sql", "original_file_path": "models\\staging\\orders.sql", "name": "orders", "resource_type": "model", "alias": "orders", "checksum": {"name": "sha256", "checksum": "58b6d28bd1b3843bd65fc2bc4122c594619390f9f28230844b34555daa0b26f4"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "dist": "user_id", "sort": "created_at"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\staging\\schema.yml", "build_path": "target\\run\\jaffle_shop\\models\\staging\\orders.sql", "deferred": false, "compiled_sql": "\n\nwith source as (\n\n    select * from `fa--interview-task.interview.orders`\n),\n\n--determinining categories for different order statuses\nxf as (\n    \n    select \n        *,\n        case\n            when status IN ('paid', 'completed', 'shipped') THEN 'completed' \n            else status \n        end as order_status_category\n    from source\n)\n\nselect * from xf", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith source as (\n\n    select * from `fa--interview-task.interview.orders`\n),\n\n--determinining categories for different order statuses\nxf as (\n    \n    select \n        *,\n        case\n            when status IN ('paid', 'completed', 'shipped') THEN 'completed' \n            else status \n        end as order_status_category\n    from source\n)\n\nselect * from xf"}, "error": null, "status": "CREATE TABLE (999.0 rows, 67.0 KB processed)", "execution_time": 4.082128286361694, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-15T14:44:39.890250Z", "completed_at": "2020-10-15T14:44:39.913206Z"}, {"name": "execute", "started_at": "2020-10-15T14:44:39.914185Z", "completed_at": "2020-10-15T14:44:43.970394Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\r\n    config(\r\n        materialized = 'table',\r\n        dist = 'payment_id',\r\n        sort = 'created_at'\r\n    )\r\n}}\r\n\r\nwith source as (\r\n    \r\n    select * from `fa--interview-task.interview.payments`\r\n)\r\n\r\nselect * from source", "compiled": true, "database": "fishtown-interview-292223", "schema": "dbt_atambay", "fqn": ["jaffle_shop", "staging", "payments"], "unique_id": "model.jaffle_shop.payments", "package_name": "jaffle_shop", "root_path": "C:\\fishtown_interview\\dbt_fishtown", "path": "staging\\payments.sql", "original_file_path": "models\\staging\\payments.sql", "name": "payments", "resource_type": "model", "alias": "payments", "checksum": {"name": "sha256", "checksum": "a7e0b22c3911184f65ff197d3a58536d4315844aef7a81d9e4e51132751f908d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "dist": "payment_id", "sort": "created_at"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\run\\jaffle_shop\\models\\staging\\payments.sql", "deferred": false, "compiled_sql": "\n\nwith source as (\n    \n    select * from `fa--interview-task.interview.payments`\n)\n\nselect * from source", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith source as (\n    \n    select * from `fa--interview-task.interview.payments`\n)\n\nselect * from source"}, "error": null, "status": "CREATE TABLE (1.2k rows, 81.4 KB processed)", "execution_time": 2.853217601776123, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-15T14:44:43.982325Z", "completed_at": "2020-10-15T14:44:43.990340Z"}, {"name": "execute", "started_at": "2020-10-15T14:44:43.991300Z", "completed_at": "2020-10-15T14:44:46.833554Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\r\n    config(\r\n        materialized = 'table',\r\n        dist = 'user_id',\r\n        sort = 'order_id'\r\n    )\r\n}}\r\n\r\nwith source as (\r\n\r\n    select * from `fa--interview-task.interview.addresses`\r\n),\r\n\r\n--determining country type\r\nxf as (\r\n    \r\n    select\r\n        *,\r\n        case\r\n            when country_code is null then 'Null country' \r\n            when country_code = 'US' THEN 'US' \r\n            else 'International' \r\n        end as country_type\r\n    from source\r\n)\r\n\r\nselect * from xf", "compiled": true, "database": "fishtown-interview-292223", "schema": "dbt_atambay", "fqn": ["jaffle_shop", "staging", "addresses"], "unique_id": "model.jaffle_shop.addresses", "package_name": "jaffle_shop", "root_path": "C:\\fishtown_interview\\dbt_fishtown", "path": "staging\\addresses.sql", "original_file_path": "models\\staging\\addresses.sql", "name": "addresses", "resource_type": "model", "alias": "addresses", "checksum": {"name": "sha256", "checksum": "7641193cd636c32225dc674bfd02493dee69debc591d8849d7ad6d17bf284405"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "dist": "user_id", "sort": "order_id"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\run\\jaffle_shop\\models\\staging\\addresses.sql", "deferred": false, "compiled_sql": "\n\nwith source as (\n\n    select * from `fa--interview-task.interview.addresses`\n),\n\n--determining country type\nxf as (\n    \n    select\n        *,\n        case\n            when country_code is null then 'Null country' \n            when country_code = 'US' THEN 'US' \n            else 'International' \n        end as country_type\n    from source\n)\n\nselect * from xf", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith source as (\n\n    select * from `fa--interview-task.interview.addresses`\n),\n\n--determining country type\nxf as (\n    \n    select\n        *,\n        case\n            when country_code is null then 'Null country' \n            when country_code = 'US' THEN 'US' \n            else 'International' \n        end as country_type\n    from source\n)\n\nselect * from xf"}, "error": null, "status": "CREATE TABLE (999.0 rows, 71.2 KB processed)", "execution_time": 2.936938762664795, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-15T14:44:46.841181Z", "completed_at": "2020-10-15T14:44:46.851154Z"}, {"name": "execute", "started_at": "2020-10-15T14:44:46.852151Z", "completed_at": "2020-10-15T14:44:49.777161Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with source as (\r\n\r\n    select * from {{ref('devices')}}\r\n),\r\n\r\n--determining first device used for purchase\r\nxf as (\r\n\r\n    select distinct \r\n                    cast(type_id as int64) as order_id, \r\n                    first_value(device) OVER (partition by type_id order by created_at \r\n                                              ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING \r\n                                             ) as purchase_device \r\n    from source \r\n    where type = 'order'\r\n),\r\n\r\n--determining categories for the purchase device derived above\r\ncategories as (\r\n    \r\n    select \r\n        *,\r\n        CASE \r\n            WHEN purchase_device = 'web' THEN 'desktop' \r\n            WHEN purchase_device IN ('ios-app', 'android-app') THEN 'mobile-app' \r\n            when purchase_device IN ('mobile', 'tablet') THEN 'mobile-web' \r\n            when NULLIF(purchase_device, '') IS NULL THEN 'unknown' \r\n            ELSE 'ERROR' \r\n        END AS purchase_device_type\r\n    from xf\r\n)\r\n\r\nselect * from categories", "compiled": true, "database": "fishtown-interview-292223", "schema": "dbt_atambay", "fqn": ["jaffle_shop", "transform", "intermediate", "first_order_device"], "unique_id": "model.jaffle_shop.first_order_device", "package_name": "jaffle_shop", "root_path": "C:\\fishtown_interview\\dbt_fishtown", "path": "transform\\intermediate\\first_order_device.sql", "original_file_path": "models\\transform\\intermediate\\first_order_device.sql", "name": "first_order_device", "resource_type": "model", "alias": "first_order_device", "checksum": {"name": "sha256", "checksum": "21098d1127caf5a4ad0ad4b5be1a332668f7495c2429ce1211462fb3e27cad4d"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["devices"]], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.jaffle_shop.devices"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\run\\jaffle_shop\\models\\transform\\intermediate\\first_order_device.sql", "deferred": false, "compiled_sql": "with source as (\n\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`devices`\n),\n\n--determining first device used for purchase\nxf as (\n\n    select distinct \n                    cast(type_id as int64) as order_id, \n                    first_value(device) OVER (partition by type_id order by created_at \n                                              ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING \n                                             ) as purchase_device \n    from source \n    where type = 'order'\n),\n\n--determining categories for the purchase device derived above\ncategories as (\n    \n    select \n        *,\n        CASE \n            WHEN purchase_device = 'web' THEN 'desktop' \n            WHEN purchase_device IN ('ios-app', 'android-app') THEN 'mobile-app' \n            when purchase_device IN ('mobile', 'tablet') THEN 'mobile-web' \n            when NULLIF(purchase_device, '') IS NULL THEN 'unknown' \n            ELSE 'ERROR' \n        END AS purchase_device_type\n    from xf\n)\n\nselect * from categories", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with source as (\n\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`devices`\n),\n\n--determining first device used for purchase\nxf as (\n\n    select distinct \n                    cast(type_id as int64) as order_id, \n                    first_value(device) OVER (partition by type_id order by created_at \n                                              ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING \n                                             ) as purchase_device \n    from source \n    where type = 'order'\n),\n\n--determining categories for the purchase device derived above\ncategories as (\n    \n    select \n        *,\n        CASE \n            WHEN purchase_device = 'web' THEN 'desktop' \n            WHEN purchase_device IN ('ios-app', 'android-app') THEN 'mobile-app' \n            when purchase_device IN ('mobile', 'tablet') THEN 'mobile-web' \n            when NULLIF(purchase_device, '') IS NULL THEN 'unknown' \n            ELSE 'ERROR' \n        END AS purchase_device_type\n    from xf\n)\n\nselect * from categories"}, "error": null, "status": "CREATE VIEW", "execution_time": 1.0826268196105957, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-15T14:44:49.783332Z", "completed_at": "2020-10-15T14:44:49.791346Z"}, {"name": "execute", "started_at": "2020-10-15T14:44:49.791346Z", "completed_at": "2020-10-15T14:44:50.864953Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with source as (\r\n\r\n    select * from {{ref('orders')}}\r\n),\r\n\r\n--determining the first completed order id for each user\r\nxf as (\r\n    \r\n    select \r\n        user_id, \r\n        min(order_id) as first_order_id \r\n    from source\r\n    where status != 'cancelled' \r\n    group by user_id\r\n)\r\n\r\nselect * from xf", "compiled": true, "database": "fishtown-interview-292223", "schema": "dbt_atambay", "fqn": ["jaffle_shop", "transform", "intermediate", "first_order"], "unique_id": "model.jaffle_shop.first_order", "package_name": "jaffle_shop", "root_path": "C:\\fishtown_interview\\dbt_fishtown", "path": "transform\\intermediate\\first_order.sql", "original_file_path": "models\\transform\\intermediate\\first_order.sql", "name": "first_order", "resource_type": "model", "alias": "first_order", "checksum": {"name": "sha256", "checksum": "6c729a76e3643c690882b452272070dbd327f03916fe1ddc620cc3b199bc6d11"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["orders"]], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.jaffle_shop.orders"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\run\\jaffle_shop\\models\\transform\\intermediate\\first_order.sql", "deferred": false, "compiled_sql": "with source as (\n\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`orders`\n),\n\n--determining the first completed order id for each user\nxf as (\n    \n    select \n        user_id, \n        min(order_id) as first_order_id \n    from source\n    where status != 'cancelled' \n    group by user_id\n)\n\nselect * from xf", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with source as (\n\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`orders`\n),\n\n--determining the first completed order id for each user\nxf as (\n    \n    select \n        user_id, \n        min(order_id) as first_order_id \n    from source\n    where status != 'cancelled' \n    group by user_id\n)\n\nselect * from xf"}, "error": null, "status": "CREATE VIEW", "execution_time": 1.1589694023132324, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-15T14:44:50.874894Z", "completed_at": "2020-10-15T14:44:50.885900Z"}, {"name": "execute", "started_at": "2020-10-15T14:44:50.885900Z", "completed_at": "2020-10-15T14:44:52.033360Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with source as (\r\n    \r\n    select * from {{ref('payments')}}\r\n),\r\n\r\n--determinining total payments for each completed order by different categories (tax, shipping etc)\r\nxf as (\r\n\r\n    select \r\n        order_id, \r\n        sum( \r\n            CASE \r\n                WHEN status = 'completed' THEN trunc(tax_amount_cents,2)\r\n                ELSE 0 \r\n            END \r\n            ) as gross_tax_amount_cents, \r\n\r\n        sum( \r\n            CASE \r\n                WHEN status = 'completed' THEN trunc(amount_cents,2)\r\n                ELSE 0 \r\n            END\r\n            ) as gross_amount_cents, \r\n\r\n        sum( \r\n            CASE \r\n                WHEN status = 'completed' THEN trunc(amount_shipping_cents,2)\r\n                ELSE 0 \r\n            END \r\n            ) as gross_shipping_amount_cents,\r\n\r\n        sum( \r\n            CASE \r\n                WHEN status = 'completed' THEN trunc((tax_amount_cents + amount_cents + amount_shipping_cents),2)\r\n                ELSE 0 \r\n            END \r\n            ) as gross_total_amount_cents \r\n            \r\n    from source \r\n    group by order_id \r\n)\r\n\r\nselect * from xf", "compiled": true, "database": "fishtown-interview-292223", "schema": "dbt_atambay", "fqn": ["jaffle_shop", "transform", "intermediate", "gross_payments"], "unique_id": "model.jaffle_shop.gross_payments", "package_name": "jaffle_shop", "root_path": "C:\\fishtown_interview\\dbt_fishtown", "path": "transform\\intermediate\\gross_payments.sql", "original_file_path": "models\\transform\\intermediate\\gross_payments.sql", "name": "gross_payments", "resource_type": "model", "alias": "gross_payments", "checksum": {"name": "sha256", "checksum": "220437fab627b0c69d7e1645659b09a76c04eb20c7f6bdb52ed2eed371d21580"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["payments"]], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.jaffle_shop.payments"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\run\\jaffle_shop\\models\\transform\\intermediate\\gross_payments.sql", "deferred": false, "compiled_sql": "with source as (\n    \n    select * from `fishtown-interview-292223`.`dbt_atambay`.`payments`\n),\n\n--determinining total payments for each completed order by different categories (tax, shipping etc)\nxf as (\n\n    select \n        order_id, \n        sum( \n            CASE \n                WHEN status = 'completed' THEN trunc(tax_amount_cents,2)\n                ELSE 0 \n            END \n            ) as gross_tax_amount_cents, \n\n        sum( \n            CASE \n                WHEN status = 'completed' THEN trunc(amount_cents,2)\n                ELSE 0 \n            END\n            ) as gross_amount_cents, \n\n        sum( \n            CASE \n                WHEN status = 'completed' THEN trunc(amount_shipping_cents,2)\n                ELSE 0 \n            END \n            ) as gross_shipping_amount_cents,\n\n        sum( \n            CASE \n                WHEN status = 'completed' THEN trunc((tax_amount_cents + amount_cents + amount_shipping_cents),2)\n                ELSE 0 \n            END \n            ) as gross_total_amount_cents \n            \n    from source \n    group by order_id \n)\n\nselect * from xf", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with source as (\n    \n    select * from `fishtown-interview-292223`.`dbt_atambay`.`payments`\n),\n\n--determinining total payments for each completed order by different categories (tax, shipping etc)\nxf as (\n\n    select \n        order_id, \n        sum( \n            CASE \n                WHEN status = 'completed' THEN trunc(tax_amount_cents,2)\n                ELSE 0 \n            END \n            ) as gross_tax_amount_cents, \n\n        sum( \n            CASE \n                WHEN status = 'completed' THEN trunc(amount_cents,2)\n                ELSE 0 \n            END\n            ) as gross_amount_cents, \n\n        sum( \n            CASE \n                WHEN status = 'completed' THEN trunc(amount_shipping_cents,2)\n                ELSE 0 \n            END \n            ) as gross_shipping_amount_cents,\n\n        sum( \n            CASE \n                WHEN status = 'completed' THEN trunc((tax_amount_cents + amount_cents + amount_shipping_cents),2)\n                ELSE 0 \n            END \n            ) as gross_total_amount_cents \n            \n    from source \n    group by order_id \n)\n\nselect * from xf"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.9541928768157959, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-15T14:44:52.038312Z", "completed_at": "2020-10-15T14:44:52.047326Z"}, {"name": "execute", "started_at": "2020-10-15T14:44:52.047326Z", "completed_at": "2020-10-15T14:44:52.992505Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\r\n    config(\r\n        materialized = 'table',\r\n        dist = 'user_id',\r\n        sort = 'created_at'\r\n    )\r\n}}\r\n\r\nwith orders as (\r\n\r\n    select * from {{ref('orders')}}\r\n),\r\n\r\nfirst_order_device as (\r\n\r\n    select * from {{ref('first_order_device')}}\r\n),\r\n\r\nfirst_order as (\r\n\r\n    select * from {{ref('first_order')}}\r\n),\r\n\r\naddresses as (\r\n\r\n    select * from {{ref('addresses')}}\r\n),\r\n\r\ngross_payments as (\r\n\r\n    select * from {{ref('gross_payments')}}\r\n),\r\n\r\njoined as (\r\n\r\n    SELECT\r\n        orders.order_id, \r\n        orders.user_id, \r\n        orders.created_at, \r\n        orders.updated_at, \r\n        orders.shipped_at, \r\n        orders.currency, \r\n        orders.status AS order_status,\r\n        orders.order_status_category,\r\n        addresses.country_type,\r\n        orders.shipping_method,\r\n        first_order_device.purchase_device_type,\r\n        first_order_device.purchase_device,\r\n        first_order.first_order_id,\r\n        orders.amount_total_cents,\r\n        gross_payments.gross_tax_amount_cents, \r\n        gross_payments.gross_amount_cents, \r\n        gross_payments.gross_shipping_amount_cents,\r\n        gross_payments.gross_total_amount_cents\r\n    from orders \r\n    left join first_order_device\r\n    using (order_id)\r\n    left join first_order\r\n    using (user_id)\r\n    left join addresses\r\n    using (order_id)\r\n    left join gross_payments\r\n    using (order_id)\r\n),\r\n\r\n--determining 1. if the order is first time (new) or repeated\r\n--determining 2. total payments for within US and outside shipping\r\ncategories as (\r\n\r\n    select *,\r\n           case \r\n                when first_order_id = order_id THEN 'new' \r\n                else 'repeat' \r\n           end as user_type,     \r\n           case\r\n                when currency = 'USD' then amount_total_cents \r\n                else gross_total_amount_cents \r\n           end as total_amount_cents\r\n    from joined\r\n),\r\n\r\n--determining amounts in USD\r\nfinal as (\r\n    \r\n    select \r\n        *,\r\n        trunc((amount_total_cents / 100),2) as order_amount_total,\r\n        trunc((total_amount_cents/ 100),2) as total_amount, \r\n        trunc((gross_tax_amount_cents/ 100),2) as gross_tax_amount, \r\n        trunc((gross_amount_cents/ 100),2) as gross_amount, \r\n        trunc((gross_shipping_amount_cents/ 100),2) as gross_shipping_amount,\r\n        trunc((gross_total_amount_cents/ 100),2) as gross_total_amount\r\n    from categories \r\n)\r\n\r\nselect * from final", "compiled": true, "database": "fishtown-interview-292223", "schema": "dbt_atambay", "fqn": ["jaffle_shop", "transform", "order_details"], "unique_id": "model.jaffle_shop.order_details", "package_name": "jaffle_shop", "root_path": "C:\\fishtown_interview\\dbt_fishtown", "path": "transform\\order_details.sql", "original_file_path": "models\\transform\\order_details.sql", "name": "order_details", "resource_type": "model", "alias": "order_details", "checksum": {"name": "sha256", "checksum": "0db118b1e6160369edfec48f4ce8fb2fb11d8a7dc20145c482f6cb5806d4e314"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "dist": "user_id", "sort": "created_at"}, "tags": [], "refs": [["orders"], ["first_order_device"], ["first_order"], ["addresses"], ["gross_payments"]], "sources": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.jaffle_shop.orders", "model.jaffle_shop.first_order_device", "model.jaffle_shop.first_order", "model.jaffle_shop.addresses", "model.jaffle_shop.gross_payments"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\run\\jaffle_shop\\models\\transform\\order_details.sql", "deferred": false, "compiled_sql": "\n\nwith orders as (\n\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`orders`\n),\n\nfirst_order_device as (\n\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`first_order_device`\n),\n\nfirst_order as (\n\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`first_order`\n),\n\naddresses as (\n\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`addresses`\n),\n\ngross_payments as (\n\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`gross_payments`\n),\n\njoined as (\n\n    SELECT\n        orders.order_id, \n        orders.user_id, \n        orders.created_at, \n        orders.updated_at, \n        orders.shipped_at, \n        orders.currency, \n        orders.status AS order_status,\n        orders.order_status_category,\n        addresses.country_type,\n        orders.shipping_method,\n        first_order_device.purchase_device_type,\n        first_order_device.purchase_device,\n        first_order.first_order_id,\n        orders.amount_total_cents,\n        gross_payments.gross_tax_amount_cents, \n        gross_payments.gross_amount_cents, \n        gross_payments.gross_shipping_amount_cents,\n        gross_payments.gross_total_amount_cents\n    from orders \n    left join first_order_device\n    using (order_id)\n    left join first_order\n    using (user_id)\n    left join addresses\n    using (order_id)\n    left join gross_payments\n    using (order_id)\n),\n\n--determining 1. if the order is first time (new) or repeated\n--determining 2. total payments for within US and outside shipping\ncategories as (\n\n    select *,\n           case \n                when first_order_id = order_id THEN 'new' \n                else 'repeat' \n           end as user_type,     \n           case\n                when currency = 'USD' then amount_total_cents \n                else gross_total_amount_cents \n           end as total_amount_cents\n    from joined\n),\n\n--determining amounts in USD\nfinal as (\n    \n    select \n        *,\n        trunc((amount_total_cents / 100),2) as order_amount_total,\n        trunc((total_amount_cents/ 100),2) as total_amount, \n        trunc((gross_tax_amount_cents/ 100),2) as gross_tax_amount, \n        trunc((gross_amount_cents/ 100),2) as gross_amount, \n        trunc((gross_shipping_amount_cents/ 100),2) as gross_shipping_amount,\n        trunc((gross_total_amount_cents/ 100),2) as gross_total_amount\n    from categories \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith orders as (\n\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`orders`\n),\n\nfirst_order_device as (\n\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`first_order_device`\n),\n\nfirst_order as (\n\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`first_order`\n),\n\naddresses as (\n\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`addresses`\n),\n\ngross_payments as (\n\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`gross_payments`\n),\n\njoined as (\n\n    SELECT\n        orders.order_id, \n        orders.user_id, \n        orders.created_at, \n        orders.updated_at, \n        orders.shipped_at, \n        orders.currency, \n        orders.status AS order_status,\n        orders.order_status_category,\n        addresses.country_type,\n        orders.shipping_method,\n        first_order_device.purchase_device_type,\n        first_order_device.purchase_device,\n        first_order.first_order_id,\n        orders.amount_total_cents,\n        gross_payments.gross_tax_amount_cents, \n        gross_payments.gross_amount_cents, \n        gross_payments.gross_shipping_amount_cents,\n        gross_payments.gross_total_amount_cents\n    from orders \n    left join first_order_device\n    using (order_id)\n    left join first_order\n    using (user_id)\n    left join addresses\n    using (order_id)\n    left join gross_payments\n    using (order_id)\n),\n\n--determining 1. if the order is first time (new) or repeated\n--determining 2. total payments for within US and outside shipping\ncategories as (\n\n    select *,\n           case \n                when first_order_id = order_id THEN 'new' \n                else 'repeat' \n           end as user_type,     \n           case\n                when currency = 'USD' then amount_total_cents \n                else gross_total_amount_cents \n           end as total_amount_cents\n    from joined\n),\n\n--determining amounts in USD\nfinal as (\n    \n    select \n        *,\n        trunc((amount_total_cents / 100),2) as order_amount_total,\n        trunc((total_amount_cents/ 100),2) as total_amount, \n        trunc((gross_tax_amount_cents/ 100),2) as gross_tax_amount, \n        trunc((gross_amount_cents/ 100),2) as gross_amount, \n        trunc((gross_shipping_amount_cents/ 100),2) as gross_shipping_amount,\n        trunc((gross_total_amount_cents/ 100),2) as gross_total_amount\n    from categories \n)\n\nselect * from final"}, "error": null, "status": "CREATE TABLE (999.0 rows, 267.1 KB processed)", "execution_time": 3.6465070247650146, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-15T14:44:52.998491Z", "completed_at": "2020-10-15T14:44:53.014446Z"}, {"name": "execute", "started_at": "2020-10-15T14:44:53.014446Z", "completed_at": "2020-10-15T14:44:56.643985Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-10-15T14:44:56.651556Z", "elapsed_time": 21.117691040039062}