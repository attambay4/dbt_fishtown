{"results": [{"node": {"raw_sql": "select * from `fa--interview-task.interview.devices`", "database": "fishtown-interview-292223", "schema": "dbt_atambay", "fqn": ["jaffle_shop", "base", "devices"], "unique_id": "model.jaffle_shop.devices", "package_name": "jaffle_shop", "root_path": "C:\\fishtown\\jaffle-shop", "path": "base\\devices.sql", "original_file_path": "models\\base\\devices.sql", "name": "devices", "resource_type": "model", "alias": "devices", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\run\\jaffle_shop\\models\\base\\devices.sql", "compiled": true, "compiled_sql": "select * from `fa--interview-task.interview.devices`", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select * from `fa--interview-task.interview.devices`"}, "error": null, "status": "CREATE VIEW", "execution_time": 1.108713150024414, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-13T03:20:47.340314Z", "completed_at": "2020-10-13T03:20:47.373229Z"}, {"name": "execute", "started_at": "2020-10-13T03:20:47.373229Z", "completed_at": "2020-10-13T03:20:48.448042Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\r\n    select * from `fa--interview-task.interview.orders`\r\n),\r\n\r\nxf as (\r\n    select \r\n        *,\r\n        case\r\n            when status IN ('paid', 'completed', 'shipped') THEN 'completed' \r\n            else status \r\n        end as order_status_category\r\n    from base\r\n)\r\n\r\nselect * from xf", "database": "fishtown-interview-292223", "schema": "dbt_atambay", "fqn": ["jaffle_shop", "base", "orders"], "unique_id": "model.jaffle_shop.orders", "package_name": "jaffle_shop", "root_path": "C:\\fishtown\\jaffle-shop", "path": "base\\orders.sql", "original_file_path": "models\\base\\orders.sql", "name": "orders", "resource_type": "model", "alias": "orders", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\run\\jaffle_shop\\models\\base\\orders.sql", "compiled": true, "compiled_sql": "with base as (\r\n    select * from `fa--interview-task.interview.orders`\r\n),\r\n\r\nxf as (\r\n    select \r\n        *,\r\n        case\r\n            when status IN ('paid', 'completed', 'shipped') THEN 'completed' \r\n            else status \r\n        end as order_status_category\r\n    from base\r\n)\r\n\r\nselect * from xf", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\r\n    select * from `fa--interview-task.interview.orders`\r\n),\r\n\r\nxf as (\r\n    select \r\n        *,\r\n        case\r\n            when status IN ('paid', 'completed', 'shipped') THEN 'completed' \r\n            else status \r\n        end as order_status_category\r\n    from base\r\n)\r\n\r\nselect * from xf"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.6237339973449707, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-13T03:20:48.454025Z", "completed_at": "2020-10-13T03:20:48.468986Z"}, {"name": "execute", "started_at": "2020-10-13T03:20:48.469983Z", "completed_at": "2020-10-13T03:20:49.076762Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select * from `fa--interview-task.interview.payments`", "database": "fishtown-interview-292223", "schema": "dbt_atambay", "fqn": ["jaffle_shop", "base", "payments"], "unique_id": "model.jaffle_shop.payments", "package_name": "jaffle_shop", "root_path": "C:\\fishtown\\jaffle-shop", "path": "base\\payments.sql", "original_file_path": "models\\base\\payments.sql", "name": "payments", "resource_type": "model", "alias": "payments", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\run\\jaffle_shop\\models\\base\\payments.sql", "compiled": true, "compiled_sql": "select * from `fa--interview-task.interview.payments`", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select * from `fa--interview-task.interview.payments`"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.6689002513885498, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-13T03:20:49.087690Z", "completed_at": "2020-10-13T03:20:49.095686Z"}, {"name": "execute", "started_at": "2020-10-13T03:20:49.095686Z", "completed_at": "2020-10-13T03:20:49.754599Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with base as (\r\n    select * from `fa--interview-task.interview.addresses`\r\n),\r\n\r\nxf as (\r\n    select\r\n        *,\r\n        case\r\n            when country_code is null then 'Null country' \r\n            when country_code = 'US' THEN 'US' \r\n            else 'International' \r\n        end as country_type\r\n    from base\r\n)\r\n\r\nselect * from xf", "database": "fishtown-interview-292223", "schema": "dbt_atambay", "fqn": ["jaffle_shop", "base", "addresses"], "unique_id": "model.jaffle_shop.addresses", "package_name": "jaffle_shop", "root_path": "C:\\fishtown\\jaffle-shop", "path": "base\\addresses.sql", "original_file_path": "models\\base\\addresses.sql", "name": "addresses", "resource_type": "model", "alias": "addresses", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\run\\jaffle_shop\\models\\base\\addresses.sql", "compiled": true, "compiled_sql": "with base as (\r\n    select * from `fa--interview-task.interview.addresses`\r\n),\r\n\r\nxf as (\r\n    select\r\n        *,\r\n        case\r\n            when country_code is null then 'Null country' \r\n            when country_code = 'US' THEN 'US' \r\n            else 'International' \r\n        end as country_type\r\n    from base\r\n)\r\n\r\nselect * from xf", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with base as (\r\n    select * from `fa--interview-task.interview.addresses`\r\n),\r\n\r\nxf as (\r\n    select\r\n        *,\r\n        case\r\n            when country_code is null then 'Null country' \r\n            when country_code = 'US' THEN 'US' \r\n            else 'International' \r\n        end as country_type\r\n    from base\r\n)\r\n\r\nselect * from xf"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.6809916496276855, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-13T03:20:49.762578Z", "completed_at": "2020-10-13T03:20:49.772552Z"}, {"name": "execute", "started_at": "2020-10-13T03:20:49.773550Z", "completed_at": "2020-10-13T03:20:50.443570Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with devices as (\r\n    select * from {{ref('devices')}}\r\n),\r\n\r\nxf as (\r\n    select \r\n        distinct cast(type_id as int64) as order_id, \r\n                 first_value(device) OVER (partition by type_id order by created_at \r\n                                           ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING \r\n                                          ) as device \r\n    from devices \r\n    where type = 'order'\r\n),\r\n\r\ncategories as (\r\n    select \r\n        *,\r\n        CASE \r\n            WHEN device = 'web' THEN 'desktop' \r\n            WHEN device IN ('ios-app', 'android-app') THEN 'mobile-app' \r\n            when device IN ('mobile', 'tablet') THEN 'mobile-web' \r\n            when NULLIF(device, '') IS NULL THEN 'unknown' \r\n            ELSE 'ERROR' \r\n        END AS purchase_device_type\r\n    from xf\r\n)\r\n\r\nselect * from categories", "database": "fishtown-interview-292223", "schema": "dbt_atambay", "fqn": ["jaffle_shop", "transform", "first_order_device"], "unique_id": "model.jaffle_shop.first_order_device", "package_name": "jaffle_shop", "root_path": "C:\\fishtown\\jaffle-shop", "path": "transform\\first_order_device.sql", "original_file_path": "models\\transform\\first_order_device.sql", "name": "first_order_device", "resource_type": "model", "alias": "first_order_device", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["devices"]], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.jaffle_shop.devices"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\run\\jaffle_shop\\models\\transform\\first_order_device.sql", "compiled": true, "compiled_sql": "with devices as (\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`devices`\n),\n\nxf as (\n    select \n        distinct cast(type_id as int64) as order_id, \n                 first_value(device) OVER (partition by type_id order by created_at \n                                           ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING \n                                          ) as device \n    from devices \n    where type = 'order'\n),\n\ncategories as (\n    select \n        *,\n        CASE \n            WHEN device = 'web' THEN 'desktop' \n            WHEN device IN ('ios-app', 'android-app') THEN 'mobile-app' \n            when device IN ('mobile', 'tablet') THEN 'mobile-web' \n            when NULLIF(device, '') IS NULL THEN 'unknown' \n            ELSE 'ERROR' \n        END AS purchase_device_type\n    from xf\n)\n\nselect * from categories", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with devices as (\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`devices`\n),\n\nxf as (\n    select \n        distinct cast(type_id as int64) as order_id, \n                 first_value(device) OVER (partition by type_id order by created_at \n                                           ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING \n                                          ) as device \n    from devices \n    where type = 'order'\n),\n\ncategories as (\n    select \n        *,\n        CASE \n            WHEN device = 'web' THEN 'desktop' \n            WHEN device IN ('ios-app', 'android-app') THEN 'mobile-app' \n            when device IN ('mobile', 'tablet') THEN 'mobile-web' \n            when NULLIF(device, '') IS NULL THEN 'unknown' \n            ELSE 'ERROR' \n        END AS purchase_device_type\n    from xf\n)\n\nselect * from categories"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.94783616065979, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-13T03:20:50.448763Z", "completed_at": "2020-10-13T03:20:50.462784Z"}, {"name": "execute", "started_at": "2020-10-13T03:20:50.462784Z", "completed_at": "2020-10-13T03:20:51.395629Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with orders as (\r\n    select * from {{ref('orders')}}\r\n),\r\n\r\nxf as (\r\n    select \r\n        user_id, \r\n        min(order_id) as first_order_id \r\n    from orders\r\n    where status != 'cancelled' \r\n    group by user_id\r\n)\r\n\r\nselect * from xf", "database": "fishtown-interview-292223", "schema": "dbt_atambay", "fqn": ["jaffle_shop", "transform", "first_order"], "unique_id": "model.jaffle_shop.first_order", "package_name": "jaffle_shop", "root_path": "C:\\fishtown\\jaffle-shop", "path": "transform\\first_order.sql", "original_file_path": "models\\transform\\first_order.sql", "name": "first_order", "resource_type": "model", "alias": "first_order", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["orders"]], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.jaffle_shop.orders"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\run\\jaffle_shop\\models\\transform\\first_order.sql", "compiled": true, "compiled_sql": "with orders as (\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`orders`\n),\n\nxf as (\n    select \n        user_id, \n        min(order_id) as first_order_id \n    from orders\n    where status != 'cancelled' \n    group by user_id\n)\n\nselect * from xf", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with orders as (\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`orders`\n),\n\nxf as (\n    select \n        user_id, \n        min(order_id) as first_order_id \n    from orders\n    where status != 'cancelled' \n    group by user_id\n)\n\nselect * from xf"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.8918395042419434, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-13T03:20:51.404158Z", "completed_at": "2020-10-13T03:20:51.414164Z"}, {"name": "execute", "started_at": "2020-10-13T03:20:51.414164Z", "completed_at": "2020-10-13T03:20:52.294000Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with payments as (\r\n    select * from {{ref('payments')}}\r\n),\r\n\r\nxf as (\r\n    select \r\n        order_id, \r\n        sum( \r\n            CASE \r\n                WHEN status = 'completed' THEN tax_amount_cents \r\n                ELSE 0 \r\n            END \r\n            ) as gross_tax_amount_cents, \r\n        sum( \r\n            CASE \r\n                WHEN status = 'completed' THEN amount_cents \r\n                ELSE 0 \r\n            END\r\n            ) as gross_amount_cents, \r\n        sum( \r\n            CASE \r\n                WHEN status = 'completed' THEN amount_shipping_cents \r\n                ELSE 0 \r\n            END \r\n            ) as gross_shipping_amount_cents, \r\n        sum( \r\n            CASE \r\n                WHEN status = 'completed' THEN (tax_amount_cents + amount_cents + amount_shipping_cents)\r\n                ELSE 0 \r\n            END \r\n            ) as gross_total_amount_cents \r\n    from payments \r\n    group by order_id \r\n)\r\n\r\nselect * from xf", "database": "fishtown-interview-292223", "schema": "dbt_atambay", "fqn": ["jaffle_shop", "transform", "gross_payments"], "unique_id": "model.jaffle_shop.gross_payments", "package_name": "jaffle_shop", "root_path": "C:\\fishtown\\jaffle-shop", "path": "transform\\gross_payments.sql", "original_file_path": "models\\transform\\gross_payments.sql", "name": "gross_payments", "resource_type": "model", "alias": "gross_payments", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["payments"]], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.jaffle_shop.payments"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\run\\jaffle_shop\\models\\transform\\gross_payments.sql", "compiled": true, "compiled_sql": "with payments as (\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`payments`\n),\n\nxf as (\n    select \n        order_id, \n        sum( \n            CASE \n                WHEN status = 'completed' THEN tax_amount_cents \n                ELSE 0 \n            END \n            ) as gross_tax_amount_cents, \n        sum( \n            CASE \n                WHEN status = 'completed' THEN amount_cents \n                ELSE 0 \n            END\n            ) as gross_amount_cents, \n        sum( \n            CASE \n                WHEN status = 'completed' THEN amount_shipping_cents \n                ELSE 0 \n            END \n            ) as gross_shipping_amount_cents, \n        sum( \n            CASE \n                WHEN status = 'completed' THEN (tax_amount_cents + amount_cents + amount_shipping_cents)\n                ELSE 0 \n            END \n            ) as gross_total_amount_cents \n    from payments \n    group by order_id \n)\n\nselect * from xf", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with payments as (\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`payments`\n),\n\nxf as (\n    select \n        order_id, \n        sum( \n            CASE \n                WHEN status = 'completed' THEN tax_amount_cents \n                ELSE 0 \n            END \n            ) as gross_tax_amount_cents, \n        sum( \n            CASE \n                WHEN status = 'completed' THEN amount_cents \n                ELSE 0 \n            END\n            ) as gross_amount_cents, \n        sum( \n            CASE \n                WHEN status = 'completed' THEN amount_shipping_cents \n                ELSE 0 \n            END \n            ) as gross_shipping_amount_cents, \n        sum( \n            CASE \n                WHEN status = 'completed' THEN (tax_amount_cents + amount_cents + amount_shipping_cents)\n                ELSE 0 \n            END \n            ) as gross_total_amount_cents \n    from payments \n    group by order_id \n)\n\nselect * from xf"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.6981396675109863, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-13T03:20:52.301946Z", "completed_at": "2020-10-13T03:20:52.313911Z"}, {"name": "execute", "started_at": "2020-10-13T03:20:52.313911Z", "completed_at": "2020-10-13T03:20:52.998088Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with orders as (\r\n    select * from {{ref('orders')}}\r\n),\r\n\r\nfirst_order_device as (\r\n    select * from {{ref('first_order_device')}}\r\n),\r\n\r\nfirst_order as (\r\n    select * from {{ref('first_order')}}\r\n),\r\n\r\naddresses as (\r\n    select * from {{ref('addresses')}}\r\n),\r\n\r\ngross_payments as (\r\n    select * from {{ref('gross_payments')}}\r\n),\r\n\r\njoined as (\r\n    SELECT\r\n        orders.order_id, \r\n        orders.user_id, \r\n        orders.created_at, \r\n        orders.updated_at, \r\n        orders.shipped_at, \r\n        orders.currency, \r\n        orders.status AS order_status,\r\n        orders.order_status_category,\r\n        addresses.country_type,\r\n        orders.shipping_method,\r\n        first_order_device.purchase_device_type,\r\n        first_order_device.device as purchase_device,\r\n        first_order.first_order_id,\r\n        orders.amount_total_cents as order_amount_total_cents,\r\n        gross_payments.gross_tax_amount_cents, \r\n        gross_payments.gross_amount_cents, \r\n        gross_payments.gross_shipping_amount_cents,\r\n        gross_payments.gross_total_amount_cents\r\n    from orders \r\n    left join first_order_device\r\n    using (order_id)\r\n    left join first_order\r\n    using (user_id)\r\n    left join addresses\r\n    using (order_id)\r\n    left join gross_payments\r\n    using (order_id)\r\n),\r\n\r\ncategories as (\r\n    select *,\r\n           case \r\n                when first_order_id = order_id THEN 'new' \r\n                else 'repeat' \r\n           end as user_type,\r\n\r\n    --confused as to why this logic was used       \r\n           case\r\n                when currency = 'USD' then order_amount_total_cents \r\n                else gross_total_amount_cents \r\n           end as total_amount_cents\r\n    from joined\r\n),\r\n\r\nfinal as (\r\n    select \r\n        *,\r\n        (order_amount_total_cents / 100) as order_amount_total,\r\n        (total_amount_cents/ 100) as total_amount, \r\n        (gross_tax_amount_cents/ 100) as gross_tax_amount, \r\n        (gross_amount_cents/ 100) as gross_amount, \r\n        (gross_shipping_amount_cents/ 100) as gross_shipping_amount,\r\n        (gross_total_amount_cents/ 100) as gross_total_amount\r\n    from categories \r\n)\r\n\r\nselect * from final", "database": "fishtown-interview-292223", "schema": "dbt_atambay", "fqn": ["jaffle_shop", "transform", "order_details"], "unique_id": "model.jaffle_shop.order_details", "package_name": "jaffle_shop", "root_path": "C:\\fishtown\\jaffle-shop", "path": "transform\\order_details.sql", "original_file_path": "models\\transform\\order_details.sql", "name": "order_details", "resource_type": "model", "alias": "order_details", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["orders"], ["first_order_device"], ["first_order"], ["addresses"], ["gross_payments"]], "sources": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.jaffle_shop.orders", "model.jaffle_shop.first_order_device", "model.jaffle_shop.first_order", "model.jaffle_shop.addresses", "model.jaffle_shop.gross_payments"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\run\\jaffle_shop\\models\\transform\\order_details.sql", "compiled": true, "compiled_sql": "with orders as (\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`orders`\n),\n\nfirst_order_device as (\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`first_order_device`\n),\n\nfirst_order as (\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`first_order`\n),\n\naddresses as (\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`addresses`\n),\n\ngross_payments as (\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`gross_payments`\n),\n\njoined as (\n    SELECT\n        orders.order_id, \n        orders.user_id, \n        orders.created_at, \n        orders.updated_at, \n        orders.shipped_at, \n        orders.currency, \n        orders.status AS order_status,\n        orders.order_status_category,\n        addresses.country_type,\n        orders.shipping_method,\n        first_order_device.purchase_device_type,\n        first_order_device.device as purchase_device,\n        first_order.first_order_id,\n        orders.amount_total_cents as order_amount_total_cents,\n        gross_payments.gross_tax_amount_cents, \n        gross_payments.gross_amount_cents, \n        gross_payments.gross_shipping_amount_cents,\n        gross_payments.gross_total_amount_cents\n    from orders \n    left join first_order_device\n    using (order_id)\n    left join first_order\n    using (user_id)\n    left join addresses\n    using (order_id)\n    left join gross_payments\n    using (order_id)\n),\n\ncategories as (\n    select *,\n           case \n                when first_order_id = order_id THEN 'new' \n                else 'repeat' \n           end as user_type,\n\n    --confused as to why this logic was used       \n           case\n                when currency = 'USD' then order_amount_total_cents \n                else gross_total_amount_cents \n           end as total_amount_cents\n    from joined\n),\n\nfinal as (\n    select \n        *,\n        (order_amount_total_cents / 100) as order_amount_total,\n        (total_amount_cents/ 100) as total_amount, \n        (gross_tax_amount_cents/ 100) as gross_tax_amount, \n        (gross_amount_cents/ 100) as gross_amount, \n        (gross_shipping_amount_cents/ 100) as gross_shipping_amount,\n        (gross_total_amount_cents/ 100) as gross_total_amount\n    from categories \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with orders as (\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`orders`\n),\n\nfirst_order_device as (\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`first_order_device`\n),\n\nfirst_order as (\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`first_order`\n),\n\naddresses as (\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`addresses`\n),\n\ngross_payments as (\n    select * from `fishtown-interview-292223`.`dbt_atambay`.`gross_payments`\n),\n\njoined as (\n    SELECT\n        orders.order_id, \n        orders.user_id, \n        orders.created_at, \n        orders.updated_at, \n        orders.shipped_at, \n        orders.currency, \n        orders.status AS order_status,\n        orders.order_status_category,\n        addresses.country_type,\n        orders.shipping_method,\n        first_order_device.purchase_device_type,\n        first_order_device.device as purchase_device,\n        first_order.first_order_id,\n        orders.amount_total_cents as order_amount_total_cents,\n        gross_payments.gross_tax_amount_cents, \n        gross_payments.gross_amount_cents, \n        gross_payments.gross_shipping_amount_cents,\n        gross_payments.gross_total_amount_cents\n    from orders \n    left join first_order_device\n    using (order_id)\n    left join first_order\n    using (user_id)\n    left join addresses\n    using (order_id)\n    left join gross_payments\n    using (order_id)\n),\n\ncategories as (\n    select *,\n           case \n                when first_order_id = order_id THEN 'new' \n                else 'repeat' \n           end as user_type,\n\n    --confused as to why this logic was used       \n           case\n                when currency = 'USD' then order_amount_total_cents \n                else gross_total_amount_cents \n           end as total_amount_cents\n    from joined\n),\n\nfinal as (\n    select \n        *,\n        (order_amount_total_cents / 100) as order_amount_total,\n        (total_amount_cents/ 100) as total_amount, \n        (gross_tax_amount_cents/ 100) as gross_tax_amount, \n        (gross_amount_cents/ 100) as gross_amount, \n        (gross_shipping_amount_cents/ 100) as gross_shipping_amount,\n        (gross_total_amount_cents/ 100) as gross_total_amount\n    from categories \n)\n\nselect * from final"}, "error": null, "status": "CREATE VIEW", "execution_time": 0.6514348983764648, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-13T03:20:53.007082Z", "completed_at": "2020-10-13T03:20:53.022030Z"}, {"name": "execute", "started_at": "2020-10-13T03:20:53.023051Z", "completed_at": "2020-10-13T03:20:53.657526Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-10-13T03:20:53.664169Z", "elapsed_time": 7.592511177062988}